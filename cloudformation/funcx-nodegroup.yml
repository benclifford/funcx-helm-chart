AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: true, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        funcx-prod-node-group (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue "eksctl-funcx-prod-cluster::SecurityGroup"
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        funcx-prod-node-group (workloads using HTTPS port, commonly used with
        extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue "eksctl-funcx-prod-cluster::SecurityGroup"
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        funcx-prod-node-group
      FromPort: 443
      GroupId: !ImportValue "eksctl-funcx-prod-cluster::SecurityGroup"
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateName: !Sub "${AWS::StackName}"
        Version: !GetAtt
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: "1"
      MinSize: "1"
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: funcx-prod-funcx-prod-node-group-Node
        - Key: kubernetes.io/cluster/funcx-prod
          PropagateAtLaunch: true
          Value: owned
        - Key: k8s.io/cluster-autoscaler/enabled
          PropagateAtLaunch: true
          Value: "true"
        - Key: k8s.io/cluster-autoscaler/funcx-prod
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier:
        - subnet-0c0d6b32bb57c39b2
        - subnet-0906da1c44cbe3b8d
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 20
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt
            - NodeInstanceProfile
            - Arn
        ImageId: ami-0b8e294a936b2bcce
        InstanceType: t3.medium
        KeyName: funcx-eks
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue "eksctl-funcx-prod-cluster::SharedNodeSecurityGroup"
              - !Ref SG
            NetworkCardIndex: 0
        UserData: >-
          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
      LaunchTemplateName: !Sub "${AWS::StackName}"
  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Path: /
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/NodeInstanceRole"
  PolicyAWSLoadBalancerController:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "ec2:CreateTags"
            Condition:
              "Null":
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
              StringEquals:
                "ec2:CreateAction": CreateSecurityGroup
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:ec2:*:*:security-group/*"
          - Action:
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
            Condition:
              "Null":
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true"
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:ec2:*:*:security-group/*"
          - Action:
              - "elasticloadbalancing:CreateLoadBalancer"
              - "elasticloadbalancing:CreateTargetGroup"
            Condition:
              "Null":
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
            Effect: Allow
            Resource: "*"
          - Action:
              - "elasticloadbalancing:AddTags"
              - "elasticloadbalancing:RemoveTags"
            Condition:
              "Null":
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true"
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:elasticloadbalancing:*:*:targetgroup/*/*"
              - !Sub >-
                arn:${AWS::Partition}:elasticloadbalancing:*:*:loadbalancer/net/*/*
              - !Sub >-
                arn:${AWS::Partition}:elasticloadbalancing:*:*:loadbalancer/app/*/*
          - Action:
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:DeleteSecurityGroup"
              - "elasticloadbalancing:ModifyLoadBalancerAttributes"
              - "elasticloadbalancing:SetIpAddressType"
              - "elasticloadbalancing:SetSecurityGroups"
              - "elasticloadbalancing:SetSubnets"
              - "elasticloadbalancing:DeleteLoadBalancer"
              - "elasticloadbalancing:ModifyTargetGroup"
              - "elasticloadbalancing:ModifyTargetGroupAttributes"
              - "elasticloadbalancing:DeleteTargetGroup"
            Condition:
              "Null":
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
            Effect: Allow
            Resource: "*"
          - Action:
              - "elasticloadbalancing:RegisterTargets"
              - "elasticloadbalancing:DeregisterTargets"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:elasticloadbalancing:*:*:targetgroup/*/*"
          - Action:
              - "iam:CreateServiceLinkedRole"
              - "ec2:DescribeAccountAttributes"
              - "ec2:DescribeAddresses"
              - "ec2:DescribeInternetGateways"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeInstances"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DescribeTags"
              - "elasticloadbalancing:DescribeLoadBalancers"
              - "elasticloadbalancing:DescribeLoadBalancerAttributes"
              - "elasticloadbalancing:DescribeListeners"
              - "elasticloadbalancing:DescribeListenerCertificates"
              - "elasticloadbalancing:DescribeSSLPolicies"
              - "elasticloadbalancing:DescribeRules"
              - "elasticloadbalancing:DescribeTargetGroups"
              - "elasticloadbalancing:DescribeTargetGroupAttributes"
              - "elasticloadbalancing:DescribeTargetHealth"
              - "elasticloadbalancing:DescribeTags"
              - "cognito-idp:DescribeUserPoolClient"
              - "acm:ListCertificates"
              - "acm:DescribeCertificate"
              - "iam:ListServerCertificates"
              - "iam:GetServerCertificate"
              - "waf-regional:GetWebACL"
              - "waf-regional:GetWebACLForResource"
              - "waf-regional:AssociateWebACL"
              - "waf-regional:DisassociateWebACL"
              - "wafv2:GetWebACL"
              - "wafv2:GetWebACLForResource"
              - "wafv2:AssociateWebACL"
              - "wafv2:DisassociateWebACL"
              - "shield:GetSubscriptionState"
              - "shield:DescribeProtection"
              - "shield:CreateProtection"
              - "shield:DeleteProtection"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:CreateSecurityGroup"
              - "elasticloadbalancing:CreateListener"
              - "elasticloadbalancing:DeleteListener"
              - "elasticloadbalancing:CreateRule"
              - "elasticloadbalancing:DeleteRule"
              - "elasticloadbalancing:SetWebAcl"
              - "elasticloadbalancing:ModifyListener"
              - "elasticloadbalancing:AddListenerCertificates"
              - "elasticloadbalancing:RemoveListenerCertificates"
              - "elasticloadbalancing:ModifyRule"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyAWSLoadBalancerController"
      Roles:
        - !Ref NodeInstanceRole
  PolicyAutoScaling:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeLaunchTemplateVersions"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyAutoScaling"
      Roles:
        - !Ref NodeInstanceRole
  PolicyCertManagerChangeSet:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "route53:ChangeResourceRecordSets"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyCertManagerChangeSet"
      Roles:
        - !Ref NodeInstanceRole
  PolicyCertManagerGetChange:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "route53:GetChange"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:route53:::change/*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyCertManagerGetChange"
      Roles:
        - !Ref NodeInstanceRole
  PolicyCertManagerHostedZones:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "route53:ListResourceRecordSets"
              - "route53:ListHostedZonesByName"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyCertManagerHostedZones"
      Roles:
        - !Ref NodeInstanceRole
  PolicyExternalDNSChangeSet:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "route53:ChangeResourceRecordSets"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyExternalDNSChangeSet"
      Roles:
        - !Ref NodeInstanceRole
  PolicyExternalDNSHostedZones:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "route53:ListHostedZones"
              - "route53:ListResourceRecordSets"
              - "route53:ListTagsForResource"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyExternalDNSHostedZones"
      Roles:
        - !Ref NodeInstanceRole
  SG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        funcx-prod-node-group
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group
            funcx-prod-node-group to communicate with control plane (kubelet and
            workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue "eksctl-funcx-prod-cluster::SecurityGroup"
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group
            funcx-prod-node-group to communicate with control plane (workloads
            using HTTPS port, commonly used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue "eksctl-funcx-prod-cluster::SecurityGroup"
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access to worker nodes in group funcx-prod-node-group
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: "::/0"
          Description: Allow SSH access to worker nodes in group funcx-prod-node-group
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: kubernetes.io/cluster/funcx-prod
          Value: owned
        - Key: Name
          Value: !Sub "${AWS::StackName}/SG"
      VpcId: !ImportValue "eksctl-funcx-prod-cluster::VPC"
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::InstanceProfileARN"
  InstanceRoleARN:
    Value: !GetAtt
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::InstanceRoleARN"
