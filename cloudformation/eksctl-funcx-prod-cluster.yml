StagesAvailable:
- Original
- Processed
TemplateBody:
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'EKS cluster (dedicated VPC: false, dedicated IAM: true) [created and
    managed by eksctl]'
  Mappings:
    ServicePrincipalPartitionMap:
      aws:
        EC2: ec2.amazonaws.com
        EKS: eks.amazonaws.com
        EKSFargatePods: eks-fargate-pods.amazonaws.com
      aws-cn:
        EC2: ec2.amazonaws.com.cn
        EKS: eks.amazonaws.com
        EKSFargatePods: eks-fargate-pods.amazonaws.com
      aws-us-gov:
        EC2: ec2.amazonaws.com
        EKS: eks.amazonaws.com
        EKSFargatePods: eks-fargate-pods.amazonaws.com
  Outputs:
    ARN:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::ARN
      Value:
        Fn::GetAtt:
        - ControlPlane
        - Arn
    CertificateAuthorityData:
      Value:
        Fn::GetAtt:
        - ControlPlane
        - CertificateAuthorityData
    ClusterSecurityGroupId:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::ClusterSecurityGroupId
      Value:
        Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
    ClusterStackName:
      Value:
        Ref: AWS::StackName
    Endpoint:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::Endpoint
      Value:
        Fn::GetAtt:
        - ControlPlane
        - Endpoint
    FeatureNATMode:
      Value: Disable
    SecurityGroup:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::SecurityGroup
      Value:
        Ref: ControlPlaneSecurityGroup
    ServiceRoleARN:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::ServiceRoleARN
      Value:
        Fn::GetAtt:
        - ServiceRole
        - Arn
    SharedNodeSecurityGroup:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::SharedNodeSecurityGroup
      Value:
        Ref: ClusterSharedNodeSecurityGroup
    SubnetsPrivate:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::SubnetsPrivate
      Value:
        Fn::Join:
        - ','
        - - subnet-0e79de4daf8cf321f
          - subnet-0d10f5ed0f8099b91
    SubnetsPublic:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::SubnetsPublic
      Value:
        Fn::Join:
        - ','
        - - subnet-0c0d6b32bb57c39b2
          - subnet-0906da1c44cbe3b8d
    VPC:
      Export:
        Name:
          Fn::Sub: ${AWS::StackName}::VPC
      Value: vpc-0d3b9f7c3a9c6c1ba
  Resources:
    ClusterSharedNodeSecurityGroup:
      Properties:
        GroupDescription: Communication between all nodes in the cluster
        Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}/ClusterSharedNodeSecurityGroup
        VpcId: vpc-0d3b9f7c3a9c6c1ba
      Type: AWS::EC2::SecurityGroup
    ControlPlane:
      Properties:
        Name: funcx-prod
        ResourcesVpcConfig:
          SecurityGroupIds:
          - Ref: ControlPlaneSecurityGroup
          SubnetIds:
          - subnet-0c0d6b32bb57c39b2
          - subnet-0906da1c44cbe3b8d
          - subnet-0e79de4daf8cf321f
          - subnet-0d10f5ed0f8099b91
        RoleArn:
          Fn::GetAtt:
          - ServiceRole
          - Arn
        Version: '1.18'
      Type: AWS::EKS::Cluster
    ControlPlaneSecurityGroup:
      Properties:
        GroupDescription: Communication between the control plane and worker nodegroups
        Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}/ControlPlaneSecurityGroup
        VpcId: vpc-0d3b9f7c3a9c6c1ba
      Type: AWS::EC2::SecurityGroup
    IngressDefaultClusterToNodeSG:
      Properties:
        Description: Allow managed and unmanaged nodes to communicate with each other
          (all ports)
        FromPort: 0
        GroupId:
          Ref: ClusterSharedNodeSecurityGroup
        IpProtocol: '-1'
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
        ToPort: 65535
      Type: AWS::EC2::SecurityGroupIngress
    IngressInterNodeGroupSG:
      Properties:
        Description: Allow nodes to communicate with each other (all ports)
        FromPort: 0
        GroupId:
          Ref: ClusterSharedNodeSecurityGroup
        IpProtocol: '-1'
        SourceSecurityGroupId:
          Ref: ClusterSharedNodeSecurityGroup
        ToPort: 65535
      Type: AWS::EC2::SecurityGroupIngress
    IngressNodeToDefaultClusterSG:
      Properties:
        Description: Allow unmanaged nodes to communicate with control plane (all
          ports)
        FromPort: 0
        GroupId:
          Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
        IpProtocol: '-1'
        SourceSecurityGroupId:
          Ref: ClusterSharedNodeSecurityGroup
        ToPort: 65535
      Type: AWS::EC2::SecurityGroupIngress
    PolicyCloudWatchMetrics:
      Properties:
        PolicyDocument:
          Statement:
          - Action:
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Sub: ${AWS::StackName}-PolicyCloudWatchMetrics
        Roles:
        - Ref: ServiceRole
      Type: AWS::IAM::Policy
    PolicyELBPermissions:
      Properties:
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeAccountAttributes
            - ec2:DescribeAddresses
            - ec2:DescribeInternetGateways
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Sub: ${AWS::StackName}-PolicyELBPermissions
        Roles:
        - Ref: ServiceRole
      Type: AWS::IAM::Policy
    ServiceRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - Fn::FindInMap:
                - ServicePrincipalPartitionMap
                - Ref: AWS::Partition
                - EKS
          Version: '2012-10-17'
        ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController
        Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}/ServiceRole
      Type: AWS::IAM::Role

