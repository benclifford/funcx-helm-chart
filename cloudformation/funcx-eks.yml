AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS cluster (dedicated VPC: false, dedicated IAM: true) [created and managed
  by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/ClusterSharedNodeSecurityGroup"
      VpcId: vpc-0d3b9f7c3a9c6c1ba
  ControlPlane:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: funcx-prod
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - subnet-0906da1c44cbe3b8d
          - subnet-0c0d6b32bb57c39b2
          - subnet-0e79de4daf8cf321f
          - subnet-0d10f5ed0f8099b91
      RoleArn: !GetAtt
        - ServiceRole
        - Arn
      Version: "1.18"
  ControlPlaneSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/ControlPlaneSecurityGroup"
      VpcId: vpc-0d3b9f7c3a9c6c1ba
  IngressDefaultClusterToNodeSG:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !GetAtt
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  PolicyCloudWatchMetrics:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "cloudwatch:PutMetricData"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyCloudWatchMetrics"
      Roles:
        - !Ref ServiceRole
  PolicyELBPermissions:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "ec2:DescribeAccountAttributes"
              - "ec2:DescribeAddresses"
              - "ec2:DescribeInternetGateways"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub "${AWS::StackName}-PolicyELBPermissions"
      Roles:
        - !Ref ServiceRole
  ServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EKS
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/ServiceRole"
Outputs:
  ARN:
    Value: !GetAtt
      - ControlPlane
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::ARN"
  CertificateAuthorityData:
    Value: !GetAtt
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Value: !GetAtt
      - ControlPlane
      - ClusterSecurityGroupId
    Export:
      Name: !Sub "${AWS::StackName}::ClusterSecurityGroupId"
  ClusterStackName:
    Value: !Ref "AWS::StackName"
  Endpoint:
    Value: !GetAtt
      - ControlPlane
      - Endpoint
    Export:
      Name: !Sub "${AWS::StackName}::Endpoint"
  FeatureNATMode:
    Value: Disable
  SecurityGroup:
    Value: !Ref ControlPlaneSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::SecurityGroup"
  ServiceRoleARN:
    Value: !GetAtt
      - ServiceRole
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::ServiceRoleARN"
  SharedNodeSecurityGroup:
    Value: !Ref ClusterSharedNodeSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::SharedNodeSecurityGroup"
  SubnetsPrivate:
    Value: !Join
      - ","
      - - subnet-0e79de4daf8cf321f
        - subnet-0d10f5ed0f8099b91
    Export:
      Name: !Sub "${AWS::StackName}::SubnetsPrivate"
  SubnetsPublic:
    Value: !Join
      - ","
      - - subnet-0906da1c44cbe3b8d
        - subnet-0c0d6b32bb57c39b2
    Export:
      Name: !Sub "${AWS::StackName}::SubnetsPublic"
  VPC:
    Value: vpc-0d3b9f7c3a9c6c1ba
    Export:
      Name: !Sub "${AWS::StackName}::VPC"
